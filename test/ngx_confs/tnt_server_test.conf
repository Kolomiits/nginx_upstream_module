http {

   autoindex  off;
   access_log off;

   include       mime.types;
   default_type  application/octet-stream;

   client_body_buffer_size 10K;
   client_header_buffer_size 1k;
   client_max_body_size 8m;
   large_client_header_buffers 2 1k;

   client_body_timeout 12;
   client_header_timeout 12;
   keepalive_timeout 15;
   send_timeout 10;

   upstream tnt {
     server 127.0.0.1:9999 max_fails=1 fail_timeout=1s;
     keepalive 10;
   }

   server {

     listen 8081 default;
     server_name tnt_test;

     # Exmaple
     location = /echo {
      tnt_pass tnt;
     }

     location = /tnt {
       tnt_pass tnt;
     }
     location /echo_2 {
       tnt_http_rest_methods get post put;
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /preset_method {
       tnt_method 'echo_2';
       tnt_pass tnt;
     }
     location = /post_pass_http_request {
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /post_preset_method {
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location = /echo_2/overflow_rest_api {
       tnt_pass_http_request_buffer_size 30;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /overflow_post_pass_http_request {
       tnt_pass_http_request_buffer_size 30;
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /rest_api_get {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /rest_api_parse_query_args {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on parse_args;
     }
     location /echo_2/pure_result_rest {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pure_result on;
     }
     location /pure_result_rest {
       tnt_method 'echo_2';
       tnt_http_rest_methods get;
       tnt_pure_result on;
       tnt_pass tnt;
     }
     location /pure_result_rest_skip_count_2 {
       tnt_method 'echo_2';
       tnt_multireturn_skip_count 2;
       tnt_http_rest_methods get;
       tnt_pure_result on;
       tnt_pass tnt;
     }
     location = /post_pure_result {
       tnt_pure_result on;
       tnt_pass tnt;
     }
     location = /post_pure_result_skip_count_1 {
       tnt_pure_result on;
       tnt_multireturn_skip_count 1;
       tnt_pass tnt;
     }

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/37 [[
     location /ucp {
       # answers check infinity timeout
       tnt_read_timeout 60m;
       # enable lua request object
       if ( $request_method = GET ) {
          tnt_method "read";
       }
       tnt_http_rest_methods get;
       tnt_multireturn_skip_count 2;
       tnt_pure_result on;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/44 [[
     location /issue_44 {
       tnt_http_rest_methods get;
       tnt_multireturn_skip_count 2;
       tnt_pure_result on;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }

     location /issue_44_not_pure {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_pass tnt;
     }

     location /issue_44_skip {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_multireturn_skip_count 2;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/43 [[
     location /issue_43 {
       tnt_http_rest_methods post;
       tnt_method echo_1;
       tnt_pass tnt;
     }

     location /echo_1/issue_43_post_and_get {
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/58 [[
     location /issue_58 {
       if ( $request_method = GET ) {
             tnt_method "read";
       }
       if ( $request_method = PUT ) {
             tnt_method "insert";
       }
       if ( $request_method = POST ) {
             tnt_method "update";
       }
       if ( $request_method = DELETE ) {
             tnt_method "delete";
       }
       tnt_http_rest_methods get delete;
       tnt_http_methods all;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # QUASTION, BUG --
     # https://github.com/tarantool/nginx_upstream_module/issues/69 [[
     location /issue_59 {
       tnt_pass_http_request on parse_args;
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     location /issue_71 {
      tnt_pass_http_request on parse_args unescape;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }

    location /pass_body {
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method pass_body_handler;
      tnt_pass tnt;
    }

    location /dont_pass_body {
      tnt_pass_http_request on;
      tnt_http_rest_methods all;
      tnt_method update;
      tnt_pass tnt;
    }

    location @pass_headers_out {
      tnt_pass_http_request on pass_body pass_headers_out;
      tnt_http_rest_methods all;
      tnt_method test_headers_out;
      tnt_pass tnt;
    }

    location /headers_out {
      add_header "x-added-header" $request_time;
      post_action @pass_headers_out;
      tnt_method update;
      tnt_pass tnt;
    }

    location /unescape {
      tnt_http_rest_methods get;
      tnt_pass_http_request parse_args unescape;
      tnt_method echo_1;
      tnt_pass tnt;
    }
   }
}
