http {

   autoindex  off;
   access_log off;

   include       mime.types;
   default_type  application/octet-stream;

   client_body_buffer_size 10m;
   client_header_buffer_size 1k;
   client_max_body_size 64m;
   large_client_header_buffers 2 1k;

   client_body_timeout 12;
   client_header_timeout 12;
   keepalive_timeout 15;
   send_timeout 10;

   upstream tnt {
     server 127.0.0.1:9999 max_fails=1 fail_timeout=1s;
     keepalive 10;
   }

   server {

     listen 8081 default;
     server_name tnt_test;

     # Exmaple
     location = /echo {
      tnt_pass tnt;
     }

     location = /tnt {
       client_body_buffer_size 200m;
       tnt_pass tnt;
     }
     location /echo_2 {
       tnt_http_rest_methods get post put;
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /preset_method {
       tnt_method 'echo_2';
       tnt_pass tnt;
     }
     location = /post_pass_http_request {
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /post_preset_method {
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location = /echo_2/overflow_rest_api {
       tnt_pass_http_request_buffer_size 30;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /overflow_post_pass_http_request {
       tnt_pass_http_request_buffer_size 30;
       tnt_method 'echo_2';
       tnt_pass_http_request on;
       tnt_pass tnt;
     }
     location /rest_api_get {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on;
     }
     location /rest_api_parse_query_args {
       tnt_http_rest_methods get;
       tnt_pass tnt;
       tnt_pass_http_request on parse_args;
     }

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/37 [[
     location /ucp {
       # answers check infinity timeout
       tnt_read_timeout 60m;
       # enable lua request object
       if ( $request_method = GET ) {
          tnt_method "read";
       }
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/44 [[
     location /issue_44 {
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }

     location /issue_44_not_pure {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_pass tnt;
     }

     location /issue_44_skip {
       tnt_method issue_44;
       tnt_http_rest_methods get;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/43 [[
     location /issue_43 {
       tnt_http_rest_methods post;
       tnt_method echo_1;
       tnt_pass tnt;
     }

     location /echo_1/issue_43_post_and_get {
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     # BUG -- https://github.com/tarantool/nginx_upstream_module/issues/58 [[
     location /issue_58 {
       if ( $request_method = GET ) {
             tnt_method "read";
       }
       if ( $request_method = PUT ) {
             tnt_method "insert";
       }
       if ( $request_method = POST ) {
             tnt_method "update";
       }
       if ( $request_method = DELETE ) {
             tnt_method "delete";
       }
       tnt_http_rest_methods get delete;
       tnt_http_methods all;
       tnt_pass_http_request on parse_args;
       tnt_pass tnt;
     }
     # ]]

     # QUASTION, BUG --
     # https://github.com/tarantool/nginx_upstream_module/issues/69 [[
     location /issue_59 {
       tnt_pass_http_request on parse_args;
       tnt_http_rest_methods post get;
       tnt_pass tnt;
     }
     # ]]

     location /issue_71 {
      tnt_pass_http_request on parse_args unescape;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }

    location /pass_body {
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method pass_body_handler;
      tnt_pass tnt;
    }

    location /dont_pass_body {
      tnt_pass_http_request on;
      tnt_http_rest_methods all;
      tnt_method update;
      tnt_pass tnt;
    }

    location /headers_out {
      add_header "x-added-header" $request_time;
      tnt_method update;
      tnt_pass tnt;
    }

    location /unescape {
      tnt_http_rest_methods get;
      tnt_pass_http_request parse_args unescape;
      tnt_method echo_1;
      tnt_pass tnt;
    }

    location /form {
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method touch;
      tnt_pass tnt;
    }

    location /form_large {
      tnt_pass_http_request_buffer_size 16000;
      tnt_pass_http_request on pass_body;
      tnt_http_rest_methods all;
      tnt_method touch;
      tnt_pass tnt;
    }

    location /eval_basic {

      tnt_eval_buffer_size 1m;

      tnt_eval $tnt_status $tnt_res {
        tnt_buffer_size 1m;
        tnt_pass_http_request on pass_body parse_args;
        tnt_http_rest_methods all;
        tnt_method test_eval;
        tnt_pass tnt;
      }

      add_header 'X-t' $tnt_status;

      if ($tnt_status = 201){
        return 201 $tnt_res;
      }
      if ($tnt_status = 202){
        return 202 $tnt_res;
      }
      if ($tnt_status = 204){
        return 204 $tnt_res;
      }
      if ($tnt_status = 206){
        return 206 $tnt_res;
      }
      if ($tnt_status = 300){
        return 300 $tnt_res;
      }
      if ($tnt_status = 301){
        return 301 $tnt_res;
      }
      if ($tnt_status = 302){
        return 302 $tnt_res;
      }
      if ($tnt_status = 303){
        return 303 $tnt_res;
      }
      if ($tnt_status = 304){
        return 304 $tnt_res;
      }
      if ($tnt_status = 307){
        return 307 $tnt_res;
      }
      if ($tnt_status = 400){
        return 400 $tnt_res;
      }
      if ($tnt_status = 401){
        return 401 $tnt_res;
      }
      if ($tnt_status = 403){
        return 403 $tnt_res;
      }
      if ($tnt_status = 404){
        return 404 $tnt_res;
      }
      if ($tnt_status = 405){
        return 405 $tnt_res;
      }
      if ($tnt_status = 408){
        return 408 $tnt_res;
      }
      if ($tnt_status = 409){
        return 409 $tnt_res;
      }
      if ($tnt_status = 411){
        return 411 $tnt_res;
      }
      if ($tnt_status = 412){
        return 412 $tnt_res;
      }
      if ($tnt_status = 413){
        return 413 $tnt_res;
      }
      if ($tnt_status = 414){
         return 414 $tnt_res;
      }
      if ($tnt_status = 415){
         return 415 $tnt_res;
      }
      if ($tnt_status = 416){
         return 416 $tnt_res;
      }
      if ($tnt_status = 421){
        return 421 $tnt_res;
      }
      if ($tnt_status = 500){
        return 500 $tnt_res;
      }
      if ($tnt_status = 501){
        return 501 $tnt_res;
      }
      if ($tnt_status = 502){
        return 502 $tnt_res;
      }
      if ($tnt_status = 503){
        return 503 $tnt_res;
      }
      if ($tnt_status = 504){
        return 504 $tnt_res;
      }
      if ($tnt_status = 507){
        return 507 $tnt_res;
      }
      return 200 $tnt_res;
    }

    location /echo_big {
      tnt_pass_http_request_buffer_size 1m;
      tnt_method echo_big;
      tnt_pass_http_request on parse_args;
      tnt_http_rest_methods all;
      tnt_http_methods all;
      tnt_pass tnt;
    }

   }
}
